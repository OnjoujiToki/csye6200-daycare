package edu.neu.csye6200.students.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import edu.neu.csye6200.classes.Person;
import edu.neu.csye6200.classes.School;
import edu.neu.csye6200.classes.Student;
import edu.neu.csye6200.classes.Teacher;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class TeacherDetails extends JFrame {
    private JTable teacherTable;
    private JButton addTeacherButton;
    private JButton deleteTeacherButton;
    private JPanel jPanel1;
    DefaultTableModel maintableModel = new DefaultTableModel();
    String[] columnNames = {"Id", "Name", "Email", "Age", "Salary"};
    TeacherDetails teacherDetails;

    public TeacherDetails() {
        teacherDetails = this;
        School.addTeacher(new Teacher(1, "asr@gmail.com", "dbshdh", 89, 1000));
        for (Person teacher : School.teacherlist) {
            System.out.println("tache" + teacher.getName());
        }
        Object[][] teacherObject = new Object[School.teacherlist.size()][5];
        int i = 0;
        for (Person c : School.teacherlist) {
            teacherObject[i][0] = c.getId();
            teacherObject[i][1] = c.getName();
            teacherObject[i][2] = c.getEmail();
            teacherObject[i][3] = c.getAge();
            teacherObject[i][4] = c.getSalary();
            i++;
        }
        maintableModel.setDataVector(teacherObject, columnNames);
        teacherTable.setModel(maintableModel);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setContentPane(this.$$$getRootComponent$$$());
        this.pack();
        setVisible(true);
        setResizable(true); // make it nonchangeable
        setDefaultCloseOperation(EXIT_ON_CLOSE); // exit when closing
        Dimension curScreenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((curScreenSize.width - 600) / 2, (curScreenSize.height - 400) / 2);
        addTeacherButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFrame jFrame = new JFrame("Add ClassRoom");
                jFrame.setContentPane(new AddTeacherView(teacherDetails).$$$getRootComponent$$$());
                jFrame.pack();
                jFrame.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
                jFrame.setVisible(true);
            }
        });
        deleteTeacherButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int getSelectedRowForDeletion = teacherTable.getSelectedRow();
                String email = String.valueOf(teacherTable.getValueAt(getSelectedRowForDeletion, 2));
                School.studentlist.stream().filter(n -> n.getEmail() == email).map(n -> School.studentlist.remove(n));
                //Check if their is a row selected
                if (getSelectedRowForDeletion != -1) {
                    maintableModel.removeRow(getSelectedRowForDeletion);

                    JOptionPane.showMessageDialog(null, "Row Deleted");
                } else {
                    JOptionPane.showMessageDialog(null, "Unable To Delete");
                }
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        jPanel1 = new JPanel();
        jPanel1.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        teacherTable = new JTable();
        jPanel1.add(teacherTable, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Teacher Details");
        jPanel1.add(label1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addTeacherButton = new JButton();
        addTeacherButton.setText("Add Teacher");
        jPanel1.add(addTeacherButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteTeacherButton = new JButton();
        deleteTeacherButton.setText("Delete Teacher");
        jPanel1.add(deleteTeacherButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return jPanel1;
    }

}
